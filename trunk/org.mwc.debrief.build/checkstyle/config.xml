<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">

	<!-- Duplicate code detection allows you to find code that has been generated 
		by Copy/Paste programming. -->
	<module name="StrictDuplicateCode">
		<property name="min" value="30" />
		<property name="severity" value="warning" />
	</module>

	<!-- Use this block to specify which levels should not be covered -->
	<module name="SeverityMatchFilter">
		<property name="severity" value="info" />
		<property name="acceptOnMatch" value="false" />
	</module>
	<module name="SeverityMatchFilter">
		<property name="severity" value="warning" />
		<property name="acceptOnMatch" value="false" />
	</module>

	<module name="TreeWalker">
		<!-- Checks for long anonymous inner classes. -->
		<module name="AnonInnerLength">
			<property name="max" value="60" />
			<property name="severity" value="warning" />
		</module>
		<!-- Finds nested blocks, i.e. blocks that are used freely in the code. -->
		<module name="AvoidNestedBlocks">
			<property name="severity" value="info" />
		</module>
		<!-- Restrict the number of number of &&, ||, &, | and ^ in an expression. -->
		<module name="BooleanExpressionComplexity">
			<property name="max" value="7" />
			<property name="severity" value="error" />
		</module>
		<!-- Checks that classes that define a covariant equals() method also override 
			method equals(java.lang.Object) -->
		<module name="CovariantEquals" />
		<!-- The complexity is measured by the number of if, while, do, for, ?:, 
			catch, switch, case statements, and operators && and || (plus one) in the 
			body of a constructor, method, static initializer, or instance initializer. -->
		<module name="CyclomaticComplexity">
			<property name="max" value="30" />
		</module>
		<!-- Check that the default is after all the cases in a switch statement. -->
		<module name="DefaultComesLast" />
		<module name="EmptyBlock">
			<property name="severity" value="warning" />
		</module>
		<module name="EmptyStatement">
			<property name="severity" value="info" />
		</module>

		<module name="EqualsAvoidNull">
			<property name="severity" value="warning" />
		</module>
		<!-- Checks that classes that override equals() also override hashCode(). -->
		<module name="EqualsHashCode" />
		<!-- Finds locations where a case contains Java code - but lacks a break, 
			return, throw or continue statement. -->
		<module name="FallThrough" />
		<!-- Checks that a class which has only private constructors is declared 
			as final. -->
		<module name="FinalClass">
			<property name="severity" value="warning" />
		</module>
		<!-- Checks that local variables that never have their values changed are 
			declared final. -->
		<module name="FinalLocalVariable">
			<property name="severity" value="info" />
		</module>
		<!-- Check that method/constructor/catch block parameters are final. Interface 
			and abstract methods are not checked -->
		<module name="FinalParameters">
			<property name="severity" value="info" />
		</module>
		<!-- Checks that a local variable or a parameter does not shadow a field 
			that is defined in the same class. -->
		<module name="HiddenField">
			<property name="severity" value="warning" />
		</module>
		<!-- Make sure that utility classes (classes that contain only static methods 
			or fields in their API) do not have a public constructor. -->
		<module name="HideUtilityClassConstructor" />
		<!-- Catching java.lang.Exception, java.lang.Error or java.lang.RuntimeException 
			is almost never acceptable. -->
		<module name="IllegalCatch">
			<property name="severity" value="warning" />
		</module>
		<!-- This check can be used to ensure that types are not declared to be 
			thrown. Declaring to throw java.lang.Error or java.lang.RuntimeException 
			is almost never acceptable. -->
		<module name="IllegalThrows" />
		<!-- Checks for assignments in subexpressions, such as in String s = Integer.toString(i 
			= 2);. -->
		<module name="InnerAssignment">
			<property name="severity" value="warning" />
		</module>
		<module name="JUnitTestCase">
			<property name="severity" value="warning" />
		</module>
		<module name="LineLength">
			<property name="max" value="160" />
			<property name="severity" value="warning" />
		</module>
		<!-- Checks that there are no "magic numbers", where a magic number is 
			a numeric literal that is not defined as a constant. -->
		<module name="MagicNumber">
			<property name="ignoreNumbers"
				value="-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ,10, 11, 12" />
			<property name="severity" value="warning" />
		</module>
		<!-- Verifies that both the java.lang.Deprecated annotation is present 
			and the @deprecated Javadoc tag is present when either is present. -->
		<module name="MissingDeprecated">
			<property name="severity" value="info" />
		</module>
		<module name="MissingSwitchDefault">
			<property name="severity" value="warning" />
		</module>
		<!-- Check for ensuring that for loop control variables are not modified 
			inside the for block. -->
		<module name="ModifiedControlVariable">
			<property name="severity" value="error" />
		</module>
		<!-- Checks for multiple occurrences of the same string literal within 
			a single file. -->
		<module name="MultipleStringLiterals">
			<property name="severity" value="info" />
		</module>
		<!-- Checks that each variable declaration is in its own statement and 
			on its own line. -->
		<module name="MultipleVariableDeclarations">
			<property name="severity" value="warning" />
		</module>
		<!-- Ensures that exceptions (defined as any class name conforming to some 
			regular expression) are immutable. That is, have only final fields. -->
		<module name="MutableException">
			<property name="severity" value="warning" />
		</module>
		<module name="NestedForDepth">
			<property name="max" value="4" />
			<property name="severity" value="warning" />
		</module>
		<module name="NestedIfDepth">
			<property name="max" value="4" />
			<property name="severity" value="warning" />
		</module>
		<module name="NestedTryDepth">
			<property name="max" value="3" />
			<property name="severity" value="warning" />
		</module>
		<!-- Checks that the clone method is not overridden from the Object class. -->
		<module name="NoClone" />
		<module name="OneStatementPerLine">
			<property name="severity" value="warning" />
		</module>
		<!-- Checks that the outer type name and the file name match. For example, 
			the class Foo must be in a file named Foo.java. -->
		<module name="OuterTypeFilename" />
		<!-- Checks for the number of types declared at the outer (or root) level 
			in a file. -->
		<module name="OuterTypeNumber">
			<property name="max" value="1" />
		</module>
		<!-- Ensure a class is has a package declaration, and (optionally) whether 
			the package name matches the directory name for the source file. -->
		<module name="PackageDeclaration" />
		<module name="RedundantImport" />
		<!-- Checks for redundant modifiers in: interface and annotation definitions, 
			the final modifier on methods of final classes, and inner interface declarations 
			that are declared as static -->
		<module name="RedundantModifier">
			<property name="severity" value="info" />
		</module>
		<module name="RedundantThrows">
			<property name="allowUnchecked" value="false" />
			<!-- Need to set to true, else we get lots of errors: "Unable to get class 
				information for ThriftException -->
			<property name="suppressLoadErrors" value="true" />
			<property name="severity" value="warning" />
		</module>

		<module name="ReturnCount">
			<property name="max" value="2" />
			<property name="severity" value="warning" />
		</module>
		<module name="SimplifyBooleanExpression">
			<property name="severity" value="info" />
		</module>
		<module name="SimplifyBooleanReturn">
			<property name="severity" value="info" />
		</module>
		<!-- Checks that string literals are not used with == or !=. -->
		<module name="StringLiteralEquality">
			<property name="severity" value="warning" />
		</module>
		<!-- Checks that an overriding clone() method invokes super.clone(). -->
		<module name="SuperClone" />
		<!-- Checks that an overriding finalize() method invokes super.finalize(). -->
		<module name="SuperFinalize" />
		<!-- Checks for uncommented main() methods (debugging leftovers). -->
		<module name="UncommentedMain" />
		<!-- Checks if unnecessary parentheses are used in a statement or expression. -->
		<module name="UnnecessaryParentheses">
			<property name="severity" value="info" />
		</module>
		<module name="UpperEll">
			<property name="severity" value="info" />
		</module>


	</module>    <!-- End of TreeWalker module -->

</module>