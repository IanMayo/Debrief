<?xml version="1.0" encoding="UTF-8"?>
<compositeCheatsheet xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="../compositeContentFile.xsd"  name="Semi Automated Track Construction">
   <taskGroup kind="sequence" name="Semi Automatic TMA Walkthrough" skip="false">
      <intro>
         <b>Introduction</b>
			<br/>
			This collection of cheat sheets will teach you how to use
			Debrief&apos;s Semi Automated Track Construction (SATC) capabilities.
			<br/>
			<br/>
			<i>NoPrint</i><b>Tip:</b>
			If you have multiple monitors, you may wish to drag out this
			<b>Cheat Sheet</b>
			window to give
			you more room for the multiple Debrief windows that you will use later
			on.<i>NoPrint</i>
      </intro>
      <onCompletion>
      </onCompletion>
      <task kind="cheatsheet" name="Concepts" skip="false">
         <intro>
            <b>Background</b>
				<br/>
				Before we get started with loading and manipulating data, we&apos;re
				going to learn some of the background terms and concepts.
         </intro>
         <onCompletion>
            Ok, that&apos;s the boring school work out of the way. The rest of
				this cheat sheet is all conducted here in Debrief.
         </onCompletion>
         <param name="path" value="overall_intro.xml"/>
      </task>
      <taskGroup kind="sequence" name="Single Leg Solution" skip="false">
         <intro>
            <b>Introduction</b>
            The first tutorial in this set will involve an engagement with just a single leg of target data.
         </intro>
         <onCompletion>
            And that&apos;s the end of the tutorial for single-leg target track
				construction.
         </onCompletion>
         <task kind="cheatsheet" name="Generating a project" skip="true">
            <intro>
               To be able to save your tutorial data, you need a Debrief
					<b>Workspace</b>
					to store your data in.
					But, if you have a Debrief
					<b>Navigator</b>
					window open, and in it you can see one or more folders in it, you
					can skip this step.
            </intro>
            <onCompletion>
               You now have a Debrief
					<b>Project</b>
					, to contain your tutorial data.
            </onCompletion>
            <param name="path" value="../GettingStarted/GenerateProject.xml"/>
         </task>
         <taskGroup kind="choice" name="Finding the sample data" skip="false">
            <intro> There are two ways in which we can load sample data. We will be modifying the
               sample data, so ensure you’re not working on data that is shared with other users
               (the master data). The first thing we need to know is whether your Debrief
               installation folder is on your local machine or on a Network Shared Folder.
               <br/> • If it&apos;s on a <b>local machine</b> go to <b>Sample Data if Debrief is on a Local Machine</b>
               <br/> • If it&apos;s on a <b>Network Shared Folder</b>, go to <b>Sample Data if Debrief is on a Network Shared Folder</b>.
            </intro>
            <task kind="cheatsheet" name="Sample Data if Debrief is on a Local Machine" skip="true">
               <intro>Debrief NG stores it&apos;s data in a local folder called a <b>Project</b>. While these
                  can be created to store new analysis data, it is also possible to select existing
                  data directories as linked sub-folders.
                  <br/><b>Note:</b> if the <b>Create Project</b> form opened
                  when you started the application, you will have already provided a project name.
                  If you also indicated that you wanted sample data to be imported, then you can
                  skip the following steps and move on to the next cheat sheet (<b>Multi Leg Solution</b>).
                  <br/><b>1.</b> Open the <b>Navigator</b> view
                  <br/><b>2.</b> Check you have a workspace/parent folder where
                  your links are stored.
                  <br/>If you don’t have a workspace, refer to the earlier cheat
                  sheet, <b>Generating a project</b>.
                  <br/><b>3.</b> If you do have one, right-click on the current
                  project in <b>Navigator</b>.
                  <br/><b>4.</b> Click on <b>New</b> > <b>Folder</b>, to activate the <b>New Folder Wizard</b>
                  We will now link to an existing folder.
                  <br/><b>5.</b> Click on the <b>Advanced</b> button.
                  <br/><b>6.</b> In the <b>Advanced Options</b>, click on <b>Link to alternate location (linked
                  folder)</b>.
                  <br/><b>7.</b> Click on <b>Browse</b>.
                  <br/><b>8.</b> Navigate to your folder, select it, and click on <b>Finish</b>.
                  <br/><b>Note</b>: if you don&apos;t have your own data, use the <b>sample_data</b> folder in the
                  Debrief installation folder (for a deployed installation), or
                  <b>org.mwc.cmap.combined.feature/root_installs</b> (for a development version of
                  Debrief). </intro>
               <onCompletion>
                  Ok, you&apos;ve found the Debrief
						<b>Sample Data</b>.
						You&apos;re ready for the tutorial now.
               </onCompletion>
               <param name="path" value="../GettingStarted/FindingYourData.xml"/>
            </task>
            <task kind="cheatsheet" name="Data Linked to from Local Machine" skip="true">
               <intro> Great, that&apos;s your data now linked. Now, just repeat this process to add any
                  other data directories you want to load data from. You probably just created a link to the sample data on your first attempt, but you may
                  also wish to create a link to a shared working folder at some point.</intro>
               <onCompletion>
                  Now we can move on to the tutorial. Go to <b>Loading a simple scenario</b>.
               </onCompletion>
               <param name="path" value="../single_load.xml"/>
            </task>
            <task kind="cheatsheet" name="Sample Data if Debrief is on a Network Shared Folder" skip="true">
               <intro>We will now copy in an
                  existing set of sample data from the <b>Debrief\DebriefNG</b> Network Shared
                  Folder.
                  <br/><b>1.</b> Open the <b>Navigator View</b>
                  <br/><b>2.</b> Define a project for your work. This is a
                  parent folder where your data (or links to data) is stored.
                  If your <b>Navigator</b> window is empty, refer to the earlier cheat sheet, <b>Generating a project</b>.
                  <br/>Now we will drag in our data:
                  <br/><b>3.</b> Open Windows Explorer.
                  <br/><b>4.</b> Arrange your windows so
                  you can see both your <b>sample data folder</b> and Debrief.
                  <br/><b>5.</b> Drag the <b>sample data
                  folder</b> from Explorer and drop it into Debrief <b>Navigator</b>.
                  <br/><b>6.</b> A dialog will open asking
                  you if you wish to <b>Copy files and folders</b> or <b>Link to files and folders</b>, select
                  <b>Copy</b>.</intro>
               <onCompletion>Great, that&apos;s your data now copied in. Now we can move onto the tutorial. Go to <b>Loading a simple scenario</b>.
               </onCompletion>
               <param name="path" value="../single_load.xml"/>
            </task>
         </taskGroup>
         <task kind="cheatsheet" name="Loading the data" skip="false">
            <intro>
               Let&apos;s get some sample data loaded.
            </intro>
            <onCompletion>
               Ok, now you have ownship track loaded, and you can see the fan of
					ownship bearing data.
            </onCompletion>
            <param name="path" value="single_load.xml"/>
         </task>
         <task kind="cheatsheet" name="Creating the scenario" skip="false">
            <intro>
               Now that data is present, it&apos;s time to create a scenario based
					upon it.
            </intro>
            <onCompletion>
               We&apos;ve provided the TMA algortihm with some data, let&apos;s see it
					calculate a solution
            </onCompletion>
            <param name="path" value="single_create.xml"/>
         </task>
         <task kind="cheatsheet" name="Getting a solution" skip="false">
            <intro>
               Now for the interesting bit. Let&apos;s see SATC generate a solution.
            </intro>
            <onCompletion>
               We now have a target solution, very close to the truth track,
					generated by SATC.
            </onCompletion>
            <param name="path" value="single_solution.xml"/>
         </task>
         <task kind="cheatsheet" name="Importing as a TMA track" skip="false">
            <intro>
               Lastly we&apos;re going to import the solution into Debrief as a normal
					TMA track, for subsequent analysis/exploitation.
            </intro>
            <onCompletion>That&apos;s the single leg solution complete, so you can now close this Debrief
               plot. In the next tutorial, we will look at multi-leg solutions.</onCompletion>
            <param name="path" value="single_import.xml"/>
         </task>
      </taskGroup>
      <taskGroup kind="sequence" name="Multi Leg Solution" skip="false">
         <intro>In this more advanced multi leg solution, the scenario has several target
            zigs, and a number of contributions are required to obtain an optimal solution.
         </intro>
         <task kind="cheatsheet" name="Loading the data file" skip="false">
            <intro>
               Once again, we will start off by loading some data.
            </intro>
            <param name="path" value="multi_load.xml"/>
         </task>
         <task kind="cheatsheet" name="Grooming the data" skip="false">
            <intro>
               The next step is to provide some analyst contributions.
            </intro>
            <param name="path" value="multi_view.xml"/>
         </task>
         <task kind="cheatsheet" name="Fun with legs" skip="false">
            <intro>
               We&apos;ve exploited all the bearing data, so now it&apos;s time to provide some third party knowledge.
            </intro>
            <onCompletion>
               And that concludes Debrief&apos;s Semi-Automatic Track Construction and the end of this tutorial. Don&apos;t forget that we have a comprehensive user manual to help you.
               <br/>Good luck!
            </onCompletion>
            <param name="path" value="multi_legs.xml"/>
         </task>
      </taskGroup>
   </taskGroup>
</compositeCheatsheet>
